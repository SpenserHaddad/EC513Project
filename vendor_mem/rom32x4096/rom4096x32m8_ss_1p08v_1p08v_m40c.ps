%!PS-Adobe-3.0
%!PS-Adobe-3.0
% common_memcomp Version: 4.0.4-beta25
% lang compiler Version: 3.0.4
%%BoundingBox: 0 0 612 792
%%Creator: post
%%DocumentData: Clean8Bit
%%DocumentPaperSizes: Letter
%%Orientation: Portrait
%%Pages: (atend)
%%PageOrder: Ascend
%%For: ARM 
%%EndComments

%%BeginProlog

% TableRow sets the table row height
% Expects dy on the stack
/TableRow {
  /tablerow exch def
} def


% ArrowRight prints an arrow pointing to the right
% Expects text x y on the stack
/ArrowRight {
  newpath
  moveto
  -2.5 1 rmoveto
  2.5 -1 rlineto
  -2.5 -1 rlineto
  stroke
} def


% ArrowLeft prints an arrow pointing to the left
% Expects text x y on the stack
/ArrowLeft {
  newpath
  moveto
  2.5 1 rmoveto
  -2.5 -1 rlineto
  2.5 -1 rlineto
  stroke
} def


% ArrowUp prints an arrow pointing up
% Expects text x y on the stack
/ArrowUp {
  newpath
  moveto
  1 -2.5 rmoveto
  -1 2.5 rlineto
  -1 -2.5 rlineto
  stroke
} def


% ArrowDown prints an arrow pointing down
% Expects text x y on the stack
/ArrowDown {
  newpath
  moveto
  1 2.5 rmoveto
  -1 -2.5 rlineto
  -1 2.5 rlineto
  stroke
} def


% CenterLabel prints text centered at the x,y
% centers on x only
% Expects text subscript x y on the stack
/CenterLabel {
  moveto
  /subscr exch def      % save the subscript
  /txt exch def         % save the text
  txt stringwidth pop   % string x on stack
  subscr stringwidth pop % subscr x on stack
  add 2 div 0 exch sub   %  0-dx/2 on stack
  0 rmoveto
  txt show
  0 -2 rmoveto
  subscr show
} def


% LeftLabel prints text to the left of the x,y
% centers on x only
% Expects text subscript x y on the stack
/LeftLabel {
  moveto
  /subscr exch def      % save the subscript
  /txt exch def         % save the text
  txt stringwidth pop   % string x on stack
  subscr stringwidth pop % subscr x on stack
  add 0 exch sub         %  0-dx on stack
  0 rmoveto
  txt show
  0 -2 rmoveto
  subscr show
} def


% RightLabel prints text to the right of the x,y
% Expects text subscript x y on the stack
/RightLabel {
  moveto
  exch
  show
  0 -2 rmoveto
  show
} def


% CenterText prints text centered at the x,y
% centers on x only
% Expects text x y on the stack
/CenterText {
  moveto
  dup stringwidth pop   % string x on stack
  2 div 0 exch sub      % string 0-x/2 on stack
  0 rmoveto
  show
} def


% Table2start begins a 2 column table.
% Expects 5 values on the stack: w1 w2 xs ys dy
% (col widths xstart ystart at upper left of table and height of row)
/Table2Start {
  TableRow % uses yrow on stack
  /tabley exch def
  /tablex exch def
  /table2width exch def
  /table1width exch def
  /tableystart tabley def

  % no drawing done yet
  % no need to update the x and y
} def

 
% Table2End ends the table
% Expects nothing on the stack
% Draws a line at the bottom of the table
/Table2End {
  1 setlinewidth
  tablex tabley
  table1width table2width add
  tableystart tabley sub
  rectstroke
  % no need to update the x and y
  tabley % return y
} def


% Table2DoubleLine doubles up the line at the bottom of a box
% Expects nothing on the stack
/Table2DoubleLine {
  newpath
  tablex tabley moveto
  table1width 0 rlineto
  table2width 0 rlineto
  1.5 setlinewidth
  stroke
} def


% Table2Verticals puts the verticals and the horiz bar
% on one row of the table
% Expects nothing on the stack
/Table2Verticals {
  % complete the box for each
  newpath
  tablex tabley moveto
  table1width 0 rmoveto
  0 tablerow rlineto
  0.5 setlinewidth
  stroke

  % bottom
  newpath
  tablex tabley moveto
  table1width 0 rlineto
  table2width 0 rlineto
  0.5 setlinewidth
  stroke

  1 setlinewidth
} def


% Table2CC prints centered strings at the top of a 2 column table.
% Expects string string on the stack
/Table2CC {

  % update the x and y
  /tabley tabley tablerow sub def

  % complete the box for each
  Table2Verticals

  % set fonts for this row
  TextFont setfont

  % col 2
  tablex table1width add table2width 2 div add
  tabley 3 add  % string xcenter y+3 on stack
  CenterText

  % col 1
  tablex table1width 2 div add
  tabley 3 add  % string xcenter y+3 on stack
  CenterText

} def


% Table2LC prints one left aligned string and one centered string
% Expects 2 strings on the stack
/Table2LC {

  % update the x and y
  /tabley tabley tablerow sub def

  % complete the box for each
  Table2Verticals

  % set fonts for this row
  TextFont setfont

  % col 2
  tablex table1width add table2width 2 div add
  tabley 3 add  % string xcenter y+3 on stack
  CenterText

  % col 1
  tablex 3 add
  tabley 3 add  % string x+2 y+3 on stack
  moveto
  show

} def


% Table2LCMicron prints one left aligned string and one centered string
% The centered string has a micron symbol at the end of it.
% Expects 2 strings on the stack
/Table2LCMicron {

  % update the x and y
  /tabley tabley tablerow sub def

  % complete the box for each
  Table2Verticals

  % col 2 width
  TextFont setfont
  dup stringwidth pop        % dx of string on stack
  /Symbol findfont 12 scalefont setfont
  (\155) stringwidth pop    % dx of symbol u on stack
  add                        % dx of number with mu
  TextFont setfont
  (m) stringwidth pop        % dx of m on stack
  add                        % dx of entire box contents on stack
  2 div                      % dx/2 on stack

  % col 2
  tablex table1width add table2width 2 div add   % xcenter of square on stack
  exch sub
  tabley 3 add  % string x y+3 on stack
  moveto
  TextFont setfont
  show
  /Symbol findfont 12 scalefont setfont
  (\155) show
  TextFont setfont
  (m) show

  % col 1
  tablex 3 add
  tabley 3 add  % string x+2 y+3 on stack
  moveto
  show

} def


% Table2LL prints two left aligned strings
% at the top of a 2 column table.
% Expects 2 string (text) on the stack
/Table2LL {

  % update the x and y
  /tabley tabley tablerow sub def

  % complete the box for each
  Table2Verticals

  % set fonts for this row
  TextFont setfont

  % col 2
  tablex table1width add
  tabley 3 add  % string x y+3 on stack
  moveto
  ( ) show
  show

  % col 1
  tablex
  tabley 3 add  % string x y+3 on stack
  moveto
  ( ) show
  show

} def


% Table2Header prints the header to the table
% Expects string string on the stack
/Table2Header {
  tablex tabley moveto
  table1width table2width add 0 rlineto 
  0 0 tablerow sub rlineto
  0 table1width table2width add sub 0 rlineto 
  0 tablerow rlineto
  0.5 setgray
  fill
  1.0 setgray
  Table2CC
  0 setgray
} def


/Table4Header {
  tablex tabley moveto
  table1width table2width add table3width add table4width add 0 rlineto 
  0 0 tablerow sub rlineto
  0 table1width table2width add table3width add table4width add sub 0 rlineto 
  0 tablerow rlineto
  0.5 setgray
  fill
  1.0 setgray
  /TextSuperScriptFont /Helvetica findfont 8 scalefont def
  Table4CC
  0 setgray
} def


/CenterTextSuperScript{
   moveto
  /sqSuper exch def
  /mUnit exch def
  dup stringwidth pop   % string x on stack
  0 exch sub      % string 0-x/2 on stack
  0 rmoveto
  show

  mUnit () ne{
    2 0 rmoveto
    (\()show
    /Symbol findfont 8 scalefont setfont
    (\155) show
    TextSuperScriptFont setfont
    mUnit show
    TextFont setfont
    sqSuper () eq {
    (\))show
    }if
  }if
    
  sqSuper () ne {
    0 4 rmoveto
    TextSuperScriptFont setfont
    sqSuper show
    0 -4 rmoveto
    TextFont setfont
    (\)) show
  } if
} def


/Table4CC {

  % update the x and y
  /tabley tabley tablerow sub def

  % complete the box for each
  Table4Verticals

  % set fonts for this row
  TextFont setfont

  % col 4
  tablex table1width add table2width add table3width add table4width 2 div add
  tabley 3 add  % string xcenter y+3 on stack
  CenterTextSuperScript

  % col 3
  tablex table1width add table2width add table3width 2 div add
  tabley 3 add  % string xcenter y+3 on stack
  CenterTextSuperScript

  % col 2
  tablex table1width add table2width 2 div add
  tabley 3 add  % string xcenter y+3 on stack
  CenterTextSuperScript

  % col 1
  tablex table1width 2 div add
  tabley 3 add  % string xcenter y+3 on stack
  CenterText

} def

% Table4Verticals puts the verticals and the horiz bar
% on one row of the table
% Expects nothing on the stack
/Table4Verticals {
  % complete the box for each
  newpath
  tablex tabley moveto
  table1width 0 rmoveto
  0 tablerow rlineto
  0 tablerow neg rmoveto
  table2width 0 rmoveto
  0 tablerow rlineto
  0 tablerow neg rmoveto
  table3width 0 rmoveto
  0 tablerow rlineto
  0 tablerow neg rmoveto
  table4width 0 rmoveto
  0 tablerow rlineto
  0.5 setlinewidth
  stroke

  % bottom
  newpath
  tablex tabley moveto
  table1width 0 rlineto
  table2width 0 rlineto
  table3width 0 rlineto
  table4width 0 rlineto
  0.5 setlinewidth
  stroke

  1 setlinewidth
} def

% Table4LC prints one left aligned string and one centered string
% Expects 4 strings on the stack
/Table4LC {

  % update the x and y
  /tabley tabley tablerow sub def

  % complete the box for each
  Table4Verticals

  % set fonts for this row
  TextFont setfont

  %col 4
  tablex table1width add table2width add table3width add table4width 2 div add
  tabley 3 add  % string xcenter y+3 on stack
  CenterText

  %col 3 
  tablex table1width add table2width add table3width 2 div add
  tabley 3 add  % string xcenter y+3 on stack
  CenterText

  % col 2
  tablex table1width add table2width 2 div add
  tabley 3 add  % string xcenter y+3 on stack
  CenterText

  % col 1
  tablex 3 add
  tabley 3 add  % string x+2 y+3 on stack
  moveto
  show

} def

% Table4End ends the table
% Expects nothing on the stack
% Draws a line at the bottom of the table
/Table4End {
  1 setlinewidth
  tablex tabley
  table1width table2width add table3width add table4width add
  tableystart tabley sub
  rectstroke
  % no need to update the x and y
  tabley % return y
} def

% Table4Start begins a 4 column table.
% Expects 7 values on the stack: w1 w2 xs ys dy
% (col widths xstart ystart at upper left of table and height of row)
/Table4Start {
  TableRow % uses yrow on stack
  /tabley exch def
  /tablex exch def
  /table4width exch def
  /table3width exch def
  /table2width exch def
  /table1width exch def
  /tableystart tabley def

  % no drawing done yet
  % no need to update the x and y
} def


% Table1CornerStart begins a 2 column table of 1 process corners.
% Expects 5 values on the stack: w1 ... wn xs ys dy
% (col widths xstart ystart at upper left of table and height of row)
/Table1CornerStart {
  TableRow % uses yrow on stack
  /tabley exch def
  /tablex exch def
  /table5width 0 def
  /table4width 0 def
  /table3width 0 def
  /table2width exch def
  /table1width exch def
  /tableystart tabley def

  % no drawing done yet
  % no need to update the x and y
} def

 
% Table1CornerEnd ends the table
% Expects nothing on the stack
% Draws a line at the bottom of the table
/Table1CornerEnd {
  1 setlinewidth
  tablex tabley
  table1width table2width add table3width add table4width add table5width add
  tableystart tabley sub
  rectstroke
  % no need to update the x and y
  tabley % return y
} def


% Table1CornerVerticals puts the verticals and the horiz bar
% on one row of the table
% Expects nothing on the stack
/Table1CornerVerticals {
  % complete the box for each

  0.5 setlinewidth


  % between col 1 and 2
  newpath
  tablex tabley moveto
  table1width 0 rmoveto
  0 tablerow rlineto
  stroke

  % bottom
  newpath
  tablex tabley moveto
  table1width 0 rlineto
  table2width 0 rlineto
  table3width 0 rlineto
  table4width 0 rlineto
  table5width 0 rlineto
  stroke

  1 setlinewidth
} def


% Table1CornerRow prints centered strings
% Expects 3 strings on the stack
%   col 1 item, col 1 superscript, 1 corner values
/Table1CornerRow {

  % update the x and y
  /tabley tabley tablerow sub def

  % complete the box for each
  Table1CornerVerticals

  % set fonts for this row
  TextFont setfont

  % col 2
  tablex table1width add table2width 2 div add
  tabley 3 add  % string xcenter y+3 on stack
  CenterText999

  % save the superscript
  /super exch def

  % col 1
  tablex 5 add
  tabley 3 add  % string x+5 y+3 on stack
  moveto
  TextFont setfont
  show

  % do the superscript
  super () ne {
    0 4 rmoveto
    TextSuperscriptFont setfont
    super show
    TextFont setfont
  } if

} def


% Table1CornerFirstCol prints the header on the first column
% Expects string xc on the stack
% Expects tabley to be at the bottom of the square
% Expects tablerow to be the height of a double box
/Table1CornerFirstCol {
  tabley tablerow 2 div add 3 sub  % string xc yc on stack
  CenterText
} def


% Table1CornerCornerCol prints the header on the first column
% Expects string string string xc on the stack
% Expects tabley to be at the bottom of the square
% Expects tablerow to be the height of a double box
/Table1CornerCornerCol {
  /xc exch def
  /temp exch def
  /volt exch def

  % first line
  TextFont setfont
  xc tabley 3 add tablerow 2 div add % string xc y on stack
  CenterText

  % next line width
  volt stringwidth pop
  (V, ) stringwidth pop add
  temp stringwidth pop add
  (oC) stringwidth pop add
  2 div
  xc exch sub
  tabley 5 add moveto

  % next line display
  /saved_font TextFont def
  volt show
  (V, ) show
  temp show
  /Symbol findfont text_size scalefont setfont
  (\260) show
  /TextFont saved_font def
  TextFont setfont
  (C) show

} def


% Table1CornerHeader prints the header to the table
% First string is over the first column.
% Then 3 strings for each column such as:
%    Fast Process
%      1.1V, 0oC
% where we supply the 'V,' and 'degrees C'.
/Table1CornerHeader {
  (Pin)   % column headings
  (Slow Process) (1.08) (-40)

  /tablerow tablerow tablerow add def  % Double the y size

  % make a box around the header area
  tablex tabley moveto
  table1width table2width add table3width add table4width add table5width add 0 rlineto 
  0 0 tablerow sub rlineto
  table1width table2width add table3width add table4width add table5width add 0 exch sub 0 rlineto 
  0 tablerow rlineto
  0.5 setgray % gray fill the box
  fill

  % White lines and text
  1.0 setgray

  /tabley tabley tablerow sub def

  % do the vertical lines between columns
  Table1CornerVerticals

  % Column 1 header
  tablex table1width add table2width 2 div add Table1CornerCornerCol

  % Pin column header
  tablex table1width 2 div add Table1CornerFirstCol

  % back to black lines and text
  0 setgray

  % Restore the row height
  /tablerow tablerow 2 div def
} def


% TableD1CornerStart begins a 2 column table of 1 double process corners.
% Expects values on the stack: pin_width corn1_1 corn1_2 
%   corn2_1 corn2_2 corn3_1 corn3_2 corn4_1 corn4_2 xs ys dy
% (col widths xstart ystart at upper left of table and height of row)
/TableD1CornerStart {
  TableRow % uses yrow on stack
  /tabley exch def
  /tablex exch def
  /table4_2_width 0 def
  /table4_1_width 0 def
  /table3_2_width 0 def
  /table3_1_width 0 def
  /table2_2_width 0 def
  /table2_1_width 0 def
  /table1_2_width exch def
  /table1_1_width exch def
  /tablep_width exch def
  /tableystart tabley def

  % no drawing done yet
  % no need to update the x and y
} def

 
% TableD1CornerEnd ends the table
% Expects nothing on the stack
% Draws a line at the bottom of the table
/TableD1CornerEnd {
  1 setlinewidth
  tablex tabley
  tablep_width
  table1_1_width add table1_2_width add
  tableystart tabley sub
  rectstroke
  % no need to update the x and y
  tabley % return y
} def


% TableD1CornerVerticals puts the verticals and the horiz bar
% on one row of the table
% Expects nothing on the stack
/TableD1CornerVerticals {
  % complete the box for each

  0.5 setlinewidth


  % single in corner 1
  tableheader 1 ne {
    newpath
    tablex tabley moveto
    tablep_width
    table1_1_width add
    0 rmoveto
    0 tablerow rlineto
    stroke
  } if
  % single between pin and first corner
  newpath
  tablex tabley moveto
  tablep_width 0 rmoveto
  0 tablerow rlineto
  stroke

  % bottom
  newpath
  tablex tabley moveto
  tablep_width
  table1_1_width add table1_2_width add
  table2_1_width add table2_2_width add
  table3_1_width add table3_2_width add
  table4_1_width add table4_2_width add
  0 rlineto
  stroke

  1 setlinewidth
} def


% TableD1CornerRow prints centered strings
% Expects 3 strings on the stack
/TableD1CornerRow {

  % update the x and y
  /tabley tabley tablerow sub def

  % complete the box for each
  TableD1CornerVerticals

  % set fonts for this row
  TextFont setfont


  % corner 1
  tablex tablep_width add
  table1_1_width add table1_2_width 2 div add
  tabley 3 add  % string xcenter y+3 on stack
  CenterText999
  tablex tablep_width add
  table1_1_width 2 div add
  tabley 3 add  % string xcenter y+3 on stack
  CenterText999

  % pin name
  tablex 5 add
  tabley 3 add  % string x+5 y+3 on stack
  moveto
  TextFont setfont
  show

} def


% TableD1CornerDRow prints centered strings
% The pin description is broken into 2 rows for this one.
% Expects 10 strings on the stack
/TableD1CornerDRow {

  % Save the old tablerow
  /olddy tablerow def
  % We will use a wider one that is almost twice as big
  /tablerow tablerow tablerow add 2 sub def
  /yup 9 def

  % update the x and y
  /tabley tabley tablerow sub def

  % complete the box for each
  TableD1CornerVerticals

  % set fonts for this row
  TextFont setfont

  % corner 1
  tablex tablep_width add
  table1_1_width add table1_2_width 2 div add
  tabley yup add  % string xcenter y+3 on stack
  CenterText999
  tablex tablep_width add
  table1_1_width 2 div add
  tabley yup add  % string xcenter y+3 on stack
  CenterText999

  % pin name in two rows
  tablex 5 add
  tabley 3 add
  moveto
  TextFont setfont
  show
  tablex 5 add
  tabley 13 add
  moveto
  show

  % restore the y height of the row
  /tablerow olddy def

} def


% TableD1CornerFirstCol prints the header on the first column
% Expects string xc on the stack
% Expects tabley to be at the bottom of the square
% Expects tablerow to be the height of a double box
/TableD1CornerFirstCol {
  tabley tablerow 2 div add 3 sub  % string xc yc on stack
  CenterText
} def


% TableD1CornerCornerCol prints the header on the corner
% Expects (Fast) (1.1) (125) xct xcl xcr on the stack
% ... xcenter for top, xcenter for left, xcenter for right
% Expects tabley to be at the bottom of the square
% Expects tablerow to be 4 times the real tablerow
/TableD1CornerCornerCol {
  /xcr exch def
  /xcl exch def
  /xct exch def
  /temp exch def
  /volt exch def
  /h tablerow 4 div def

  % first line (Fast Process)
  xct
  tabley h add h add h add 3 add % string xc y on stack
  CenterText

  % next line width (1.10V, 0oC)
  volt stringwidth pop
  (V, ) stringwidth pop add
  temp stringwidth pop add
  (oC) stringwidth pop add
  2 div
  xct exch sub
  tabley h add h add 5 add % string xc y on stack
  moveto

  % next line display (1.10V, 0oC)
  /saved_font TextFont def
  volt show
  (V, ) show
  temp show
  /Symbol findfont text_size scalefont setfont
  (\260) show
  /TextFont saved_font def
  TextFont setfont
  (C) show

  % Puse Width display
  (Pulse) xcl tabley h add 3 add CenterText
  (Width) xcl tabley 5 add CenterText

  % Voltage display
  (Voltage) xcr tabley 3 add h 2 div add CenterText

} def


% Centers converts 3 values to the 3 needed centers
% Expects xleft width1 width2 on stack
% Returns xtc xlc xrc
/Centers {
  /w2 exch def
  /w1 exch def
  /l exch def

  l w1 add               % xtc on stack
  l w1 2 div add         % xtc xlc on stack
  l w1 add w2 2 div add  % xtc xlc xrc on stack
} def


% TableD1CornerHeader prints the header to the table
% Expects nothing on the stack
% First string is over the first column.
% Then 3 strings for each column such as:
%    Fast Process
%      1.1V, 0oC
% where we supply the 'V,' and 'degrees C'.
/TableD1CornerHeader {
  (Pin)     % pin column heading
  (Symbol)  % var column heading
  (Slow Process) (1.08) (-40)
  /tablerow tablerow 4 mul def  % 4* the y size

  % Create a box, fill it with black
  tablex tabley moveto
  tablep_width
  table1_1_width add table1_2_width add
  table2_1_width add table2_2_width add
  table3_1_width add table3_2_width add
  table4_1_width add table4_2_width add
  0 rlineto 
  0 0 tablerow sub rlineto
  tablep_width
  table1_1_width add table1_2_width add
  table2_1_width add table2_2_width add
  table3_1_width add table3_2_width add
  table4_1_width add table4_2_width add
  0 exch sub 0 rlineto 
  0 tablerow rlineto
  0.5 setgray
  fill

  % do the text in almost white
  1.0 setgray
  /tabley tabley tablerow sub def
  /tableheader 1 def
  TableD1CornerVerticals
  /tableheader 0 def

  tablex tablep_width add
  table1_1_width table1_2_width Centers % string string string xtc xlc xrc on stack
  TableD1CornerCornerCol

  tablex tablep_width 2 div add TableD1CornerFirstCol

  % back to black, back to normal table row height
  0 setgray
  /tablerow tablerow 4 div def
} def


% TableT1CornerStart begins a 2 column table of 1 double process corners.
% Expects nothing on the stack
% Uses pagey line_left global vars
/TableT1CornerStart {
  14 TableRow                % row height
  /found999 (no) def         % figure out illegal ema states 
  /tabley pagey def          % starting x,y of table
  /tablex line_left def
  /table4_2_width 0 def     % column widths
  /table4_1_width 0 def
  /table3_2_width 0 def     % column widths
  /table3_1_width 0 def
  /table2_2_width 0 def     % column widths
  /table2_1_width 0 def
  /table1_2_width 44 def     % column widths
  /table1_1_width 44 def
  /tablet_width 80 def
  /tablep_width 124 def
  /tableystart tabley def

  % no drawing done yet
  % no need to update the x and y
} def


% EMAIlegalFootnote
% Expects nothing on the stack
% returns new page y
/EMAIllegalFootnote {
  /tabley pagey 10 sub def
  tablex tabley moveto
  TextFont setfont
  (Timing value of ** indicates illegal EMA setting for this corner.) show
} def

 
% TableT1CornerEnd ends the table
% Expects nothing on the stack
% Draws a line at the bottom of the table
/TableT1CornerEnd {
  1 setlinewidth
  tablex tabley
  tablep_width tablet_width add
  table1_1_width add table1_2_width add
  tableystart tabley sub
  rectstroke
  % no need to update the x and y
  found999 (yes) eq
  { EMAIllegalFootnote } if
  tabley % return y
} def


% TableT1CornerVerticals puts the verticals and the horiz bar
% on one row of the table
% Expects nothing on the stack
/TableT1CornerVerticals {
  % complete the box for each

  0.5 setlinewidth

  % single in corner 1
  tableheader 1 ne {
    newpath
    tablex tabley moveto
    tablep_width tablet_width add
    table1_1_width add
    0 rmoveto
    0 tablerow rlineto
    stroke
  } if

  % double between symbol and first corner
  newpath
  tablex tabley moveto
  tablep_width tablet_width add 1 sub 0 rmoveto
  0 tablerow rlineto
  stroke
  newpath
  tablex tabley moveto
  tablep_width tablet_width add 1 add 0 rmoveto
  0 tablerow rlineto
  stroke

  % single between pin and symbol
  newpath
  tablex tabley moveto
  tablep_width 0 rmoveto
  0 tablerow rlineto
  stroke

  % bottom
  newpath
  tablex tabley moveto
  tablep_width tablet_width add
  table1_1_width add table1_2_width add
  table2_1_width add table2_2_width add
  table3_1_width add table3_2_width add
  table4_1_width add table4_2_width add
  0 rlineto
  stroke

  1 setlinewidth
} def

% CenterText999 prints text centered at the x,y
% '999' is changed to **
% centers on x only
% Expects text x y on the stack
/CenterText999 {
  moveto
  dup (999.000) eq
  {                   % replace string if == '999.000'
    pop
    (**)
    % found999 (yes) def
  } if
  dup stringwidth pop   % string x on stack
  2 div 0 exch sub      % string 0-x/2 on stack
  0 rmoveto
  show
} def


% TableT1CornerRow prints centered strings
% Expects 3 strings on the stack
%   pin  pin-superscript  symbol symbol-subscript
%   1 corners with min max for each
/TableT1CornerRow {

  % update the x and y
  /tabley tabley tablerow sub def

  % complete the box for each
  TableT1CornerVerticals

  % set fonts for this row
  TextFont setfont

  % corner 1
  tablex tablep_width add tablet_width add
  table1_1_width add table1_2_width 2 div add
  tabley 3 add  % string xcenter y+3 on stack
  CenterText999
  tablex tablep_width add tablet_width add
  table1_1_width 2 div add
  tabley 3 add  % string xcenter y+3 on stack
  CenterText999

  % symbol subscript
  /subs exch def

  % symbol name
  /symbol exch def

  % calculate width
  TextFont setfont
  symbol stringwidth pop
  TextSuperscriptFont setfont
  subs stringwidth pop
  add 2 div                % width/2 now on stack

  % show
  tablex tablep_width add tablet_width 2 div add
  exch sub          % xcenter-width/2 on stack
  tabley 4 add      % x y+4 on stack
  moveto
  TextFont setfont
  symbol show
  TextSuperscriptFont setfont
  0 -2 rmoveto
  subs show

  % save the superscript
  /super exch def

  % pin name
  tablex 3 add
  tabley 3 add  % string x+3 y+3 on stack
  moveto
  TextFont setfont
  show

  % do the superscript
  super () ne {
    0 4 rmoveto
    TextSuperscriptFont setfont
    super show
    TextFont setfont
  } if

} def


% TableT1CornerDRow prints centered strings
% Expects strings on the stack
%   pin pin  pin-superscript  symbol symbol-subscript
%   1 corners with min max for each
/TableT1CornerDRow {

  % Save the old tablerow
  /olddy tablerow def
  % We will use a wider one that is almost twice as big
  /tablerow tablerow tablerow add 2 sub def
  /yup 9 def

  % update the x and y
  /tabley tabley tablerow sub def

  % complete the box for each
  TableT1CornerVerticals

  % set fonts for this row
  TextFont setfont

  % corner 1
  tablex tablep_width add tablet_width add
  table1_1_width add table1_2_width 2 div add
  tabley yup add  % string xcenter y+3 on stack
  CenterText999
  tablex tablep_width add tablet_width add
  table1_1_width 2 div add
  tabley yup add  % string xcenter y+3 on stack
  CenterText999

  % symbol subscript
  /subs exch def

  % symbol name
  /symbol exch def

  % calculate width
  TextFont setfont
  symbol stringwidth pop
  TextSuperscriptFont setfont
  subs stringwidth pop
  add 2 div                % width/2 now on stack

  % show
  tablex tablep_width add tablet_width 2 div add
  exch sub          % xcenter-width/2 on stack
  tabley yup add 1 add      % x y+1+yup on stack
  moveto
  TextFont setfont
  symbol show
  TextSuperscriptFont setfont
  0 -2 rmoveto
  subs show

  % save the superscript
  /super exch def

  % pin name
  tablex 3 add
  tabley 3 add  % string x+3 y+3 on stack
  moveto
  TextFont setfont
  show

  % do the superscript
  super () ne {
    0 4 rmoveto
    TextSuperscriptFont setfont
    super show
    TextFont setfont
  } if

  tablex 3 add
  tabley olddy add
  moveto
  show

  % restore the row height
  /tablerow olddy def

} def


% TableT1CornerFirstCol prints the header on the first column
% Expects string xc on the stack
% Expects tabley to be at the bottom of the square
% Expects tablerow to be the height of a double box
/TableT1CornerFirstCol {
  tabley tablerow 2 div add 3 sub  % string xc yc on stack
  CenterText
} def


% TableT1CornerCornerCol prints the header on the corner
% Expects (Fast) (1.1) (125) xct xcl xcr on the stack
% ... xcenter for top, xcenter for left, xcenter for right
% Expects tabley to be at the bottom of the square
% Expects tablerow to be 4 times the real tablerow
/TableT1CornerCornerCol {
  /xcr exch def
  /xcl exch def
  /xct exch def
  /temp exch def
  /volt exch def
  /h tablerow 3 div def

  % first line (Fast Process)
  xct
  tabley h add h add 3 add % string xc y on stack
  TextFont setfont
  CenterText

  % next line width (1.10V, 0oC)
  volt stringwidth pop
  (V, ) stringwidth pop add
  temp stringwidth pop add
  (oC) stringwidth pop add
  2 div
  xct exch sub
  tabley h add 5 add % string xc y on stack
  moveto

  % next line display (1.10V, 0oC)
  /saved_font TextFont def
  volt show
  (V, ) show
  temp show
  /Symbol findfont text_size scalefont setfont
  (\260) show
  /TextFont saved_font def
  TextFont setfont
  (C) show

  % Puse Width display
  (Min) xcl tabley 5 add CenterText

  % Voltage display
  (Max) xcr tabley 5 add CenterText

} def


% TableT1CornerHeader prints the header to the table
% Expects nothing on the stack
% First string is over the first column.
% Second string is over the symbol column.
% Then 3 strings for each column such as:
%    Fast Process
%      1.1V, 0oC
% where we supply the 'V,' and 'degrees C'.
/TableT1CornerHeader {
  (Pin)     % pin column heading
  (Symbol)  % var column heading
  (Slow Process) (1.08) (-40)

  % Setup the fonts for the heading
  /TextFont /Helvetica-Bold findfont text_size scalefont def

  /tablerow tablerow 3 mul def  % 3* the y size

  % Create a box, fill it with black
  tablex tabley moveto
  tablep_width tablet_width add
  table1_1_width add table1_2_width add
  0 rlineto 
  0 0 tablerow sub rlineto
  tablep_width tablet_width add
  table1_1_width add table1_2_width add
  0 exch sub 0 rlineto 
  0 tablerow rlineto
  0.5 setgray
  fill

  % do the text in white
  1.0 setgray
  /tabley tabley tablerow sub def
  /tableheader 1 def
  TableT1CornerVerticals
  /tableheader 0 def

  tablex tablep_width add tablet_width add
  table1_1_width table1_2_width Centers % string string string xtc xlc xrc on stack
  TableT1CornerCornerCol

  tablex tablep_width add tablet_width 2 div add TableT1CornerFirstCol

  tablex tablep_width 2 div add TableT1CornerFirstCol

  % back to black, back to normal table row height
  0 setgray
  /tablerow tablerow 3 div def

  % Setup the fonts for the rest of the table
  /TextFont /Helvetica findfont text_size scalefont def
  /TextSuperscriptFont /Helvetica findfont 8 scalefont def
} def


% TextEnd ends a paragraph (or series of paragraphs)
% Expects nothing on the stack
% returns the new page y
/TextEnd {
  text_y    % return this 
} def


% TextBulletOn sets bullets at start of para
% Expects nothing on the stack
/TextBulletOn {
  /text_bullet true def
  /Symbol findfont text_size scalefont setfont
  (\267 ) stringwidth pop
  /text_bullet_width exch def
  TextFont setfont
  /text_bullet true def
} def


% TextBulletOff sets bullets off at start of para
% Expects nothing on the stack
/TextBulletOff {
  /text_bullet false def
} def


% TextStart initializes the paragraph stuff
% Expects left right margins y deltay on the stack
/TextStart {
  /text_dy exch def
  /text_y exch def
  /text_right exch def
  /text_left exch def
  /text_starty text_y def
  /text_bullet false def
  /text_size 10 def
  /text_indent_width 0 def
} def


% TextParaStart initializes one paragraph
% Expects nothing on the stack
/TextParaStart {

  % carrige return linefeed
  /text_y text_y text_dy sub def
  /text_x text_left def
  text_x text_y moveto

  % if bullet show and step over in x
  text_bullet {
    /Symbol findfont text_size scalefont setfont
    (\267 ) show
    TextFont setfont
    /text_x text_x text_bullet_width add def
  } if

  % text_indent does not apply to the first line
} def


% TextParaEnd ends one paragraph.
% Expects nothing on the stack
/TextParaEnd {
} def


% TextIndent sets the indent string used at start of para
% all following lines space over the indent width
% Expects string on the stack
/TextIndent {
  stringwidth pop
  /text_indent_width exch def
} def


% TextNewline does a carrige return line feed
% Expects nothing on the stack
/TextNewline {
  /text_y text_y text_dy sub def
  /text_x text_left def
  text_x text_y moveto
  text_bullet {
    text_bullet_width 0 rmoveto
    /text_x text_x text_bullet_width add def
  } if
  text_indent_width 0 gt {
    text_indent_width 0 rmoveto
    /text_x text_x text_indent_width add def
  } if
} def


% TextWord puts one word in the current paragraph
% Expects string on the stack
/TextWord {
  dup stringwidth pop    % dx on the stack
  /text_dx exch def
  text_dx text_x add     % x pos at end of word on stack
  text_right gt {        % true if word will not fit
    TextNewline
  } if                   % do newline if true
  dup ( ) eq
  text_x text_left eq
  and                     % if word is space and at left margin then pop
  {
    pop 
  } {
    show
    /text_x text_x text_dx add def
  } ifelse % else show
} def


% TextSuperscript puts a superscript word in the current paragraph
% The routine does not test for too wide, the superscript MUST
% go with the previous word.
% Expects string on the stack
/TextSuperscript {
  TextSuperscriptFont setfont
  dup stringwidth pop    % dx on the stack
  /text_x exch text_x add def
  0 4 rmoveto
  show
  0 0 text_size 2 div sub rmoveto
  TextFont setfont
} def


% TextReserveSpace makes sure there is enough space on
% the current line for the given text to be printed.
% If there isnt enough, a newline is generated.
/TextReserveSpace {
  stringwidth pop    % dx on the stack
  text_x add         % x at end of work on stack
  text_right gt {    % true if word will not fit
    TextNewline
  } if               % do newline if true
} def


% TextPiece puts words in the current paragraph
% Expects string on the stack
/TextPiece {
  TextFont setfont
  {
    % expect string to search on stack
    ( ) search   % post match pre true or string false on stack
    { TextWord TextWord }  % true display pre, display space
    { TextWord exit }      % false display string break
    ifelse
    % go around loop again with string to search on stack
  } loop
} def


% Expects string on the stack
% Uses c and s vars
/TextFourAdd {
  s 1 eq {
    % first one
    TextPiece
  } {
    s c eq {
      % last one
      ( and ) TextPiece
      TextPiece
    } {
      % a middle one
      (, ) TextPiece
      TextPiece
    } ifelse
  } ifelse
} def


% TextFourList prints from 1 to 4 things to the paragraph
% Expects 4 strings on the stack. (3 could be empty).
/TextFourList {
  /s1 exch def
  /s2 exch def
  /s3 exch def
  /s4 exch def
  /c 0 def

  % count the number of items
  s1 () ne {
    /c c 1 add def
  } if
  s2 () ne {
    /c c 1 add def
  } if
  s3 () ne {
    /c c 1 add def
  } if
  s4 () ne {
    /c c 1 add def
  } if

  % display the items
  /s 0 def
  s1 () ne {
    /s 1 s add def
    s1 TextFourAdd
  } if
  s2 () ne {
    /s 1 s add def
    s2 TextFourAdd
  } if
  s3 () ne {
    /s 1 s add def
    s3 TextFourAdd
  } if
  s4 () ne {
    /s 1 s add def
    s4 TextFourAdd
  } if

} def


% TextLine puts a complete paragraph on the page
% Expects string on the stack
/TextLine {
  dup () eq {
    % Empty, go down 1/2 line.
    pop
    /text_y text_y text_dy 2 div sub def
  } {
    % Normal string, show it
    TextParaStart
    TextPiece
    TextParaEnd
  } ifelse
} def


% TextDegree prints a degree symbol
% Expects nothing on the stack
/TextDegree {
  /TextFont /Symbol findfont text_size scalefont def
  (\260) TextPiece
  /TextFont /Helvetica findfont text_size scalefont def
} def


% TextRegistered prints a copyright symbol
% Expects nothing on the stack
/TextRegistered {
  /TextFont /Symbol findfont text_size scalefont def
  (\342) TextPiece
  /TextFont /Helvetica findfont text_size scalefont def
} def


% TextTrademark prints a degree symbol
% Expects nothing on the stack
/TextTrademark {
  /TextFont /Symbol findfont text_size scalefont def
  (\344) TextPiece
  /TextFont /Helvetica findfont text_size scalefont def
} def


% TextCopyright prints a copyright symbol
% Expects nothing on the stack
/TextCopyright {
  /TextFont /Symbol findfont text_size scalefont def
  (\343) TextPiece
  /TextFont /Helvetica findfont text_size scalefont def
} def


% LeftShow prints text to the left of the point
% Expects string x y on the stack
/LeftShow {
  moveto
  dup stringwidth pop  % string dx on stack
  0 exch sub           % 0-x on stack
  0 rmoveto
  show
} def


% LeftShowMicron prints text to the left of the point
% Expects two string x y on the stack
/LeftShowMicron {
  moveto
  dup stringwidth pop
  /Helvetica-Bold findfont title_size scalefont setfont
  /suffStringWidth exch def
  /procString exch def
  dup stringwidth pop
  /techStringWidth exch def
  /techString exch def
  suffStringWidth techStringWidth add 20 add 0 exch sub 0 rmoveto
  techString show
  /Symbol findfont title_size scalefont setfont
  (\155) show
  /Helvetica-Bold findfont title_size scalefont setfont
  (m) show
  procString show
}def

% LeftShowRedundancy prints text to the left of the point
% Expects two string x y on the stack
/LeftShowRedundancy {
  moveto
  dup stringwidth pop
  /Helvetica-Bold findfont title_size scalefont setfont
  /suffStringWidth exch def
  /textRed exch def
  suffStringWidth 20 add 0 exch sub 0 rmoveto
  textRed show
  title_size 2 div 0 exch rmoveto
  /Helvetica-Bold findfont text_size scalefont setfont
  (TM) show
  /Helvetica-Bold findfont title_size scalefont setfont
} def

  

% SectionLine does the line part of the section header
% Expects y on the stack
/SectionLine {
  /y exch def
  /y y line_above sub def
  newpath
  line_left y moveto
  line_right y lineto
  1 setlinewidth
  stroke
} def


% SectionStart prints a horizontal bar and a section header on the page
% Expects string string y on the stack
% returns the new page y
/SectionStart {
  SectionLine  % var y is set
  /y y line_below sub 10 sub def
  line_left y moveto
  /text2 exch def      % get the subtext
  /Helvetica-Bold findfont text_size scalefont setfont
  ( ) show             % space over from start of line
  show                 % display string
  text2 () ne {
    /Helvetica findfont text_size scalefont setfont
    ( \() show          % space over
    text2 show           % print the explanation
    (\)) show
  } if
  y 10 add             % return new y
} def

% MicronSectionStart prints a horizontal bar and a section header on the page
% Expects string y on the stack
% returns the new page y
/MicronSectionStart {
  SectionLine  % var y is set
  /y y line_below sub 10 sub def
  line_left y moveto
  /Helvetica-Bold findfont text_size scalefont setfont
  ( ) show             % space over from start of line
  show                 % display string

  y 10 add             % return new y
} def

/line_left 55 def
/line_right 550 def
/line_above 10 def
/line_below 10 def

% EndingCopyright prints the copyright info at the end
% of the last page.  The y location is set but the x size
% depends on the section line size.
% Expects xc y on the stack
/EndingCopyright {
  SectionLine
  /y y line_below sub def
  /xc exch def
  line_left line_right y 9 TextStart
  /text_size 7 def
  /TextFont /Helvetica findfont text_size scalefont def
TextParaStart
(Words and logos marked with ) TextPiece
TextRegistered
( or ) TextPiece
TextTrademark
( are registered trademarks or trademarks of ARM) TextPiece
TextRegistered
( in the EU and other countries, except as otherwise stated below in this\
 proprietary notice. Other brands and names mentioned herein may be the trademarks\
 of their respective owners.) TextPiece
TextParaEnd
/text_y text_y 4 sub def
(Neither the whole nor any part of the information contained in, or the\
 product described in, this document may be adapted or reproduced in any\
 material form except with the prior written permission of the copyright holder.) TextLine
/text_y text_y 4 sub def
(The product described in this document is subject to continuous developments\
 and improvements. All particulars of the product and its use contained in this\
 document are given by ARM in good faith. However, all warranties implied or \
 expressed, including but not limited to implied warranties of merchantability, or\
 fitness for purpose, are excluded.) TextLine
/text_y text_y 4 sub def
(This document is intended only to assist the reader in the use of the product. \
 ARM shall not be liable for any loss or damage arising from the use of any \
 information in this document, or any error or omission in such information, or \
 any incorrect use of the product.) TextLine
/text_y text_y 4 sub def
(Where the term ARM is used it means "ARM or any of its subsidiaries as appropriate".)  TextLine
/text_y text_y 4 sub def
(ARM reserves the right to make changes to any products and services\
 described herein, at any time without notice in order to make improvements\
 in design, performance, or presentation and to provide the best possible\
 products and services. Customers should obtain the latest specifications\
 before referencing any information, product, or service described herein,\
 except as expressly agreed in writing by and officer of ARM.) TextLine
/text_y text_y 4 sub def
(ARM does not assume any responsibility or liability arising out of the\
 application or use of any products or services described herein, except\
 as expressly agreed to in writing by and officer of ARM; nor does the\
 purchase, lease, or use of a product or service from ARM convey license\
 under any patent rights, copyrights, trademark rights, or any other of\
 the intellectual property rights of ARM or of third parties.) TextLine
} def



% CenterTextMu prints two text strings centered at the x,y
% with a mu symbol between the text strings
% centers on x only
% Expects text text x y on the stack
/CenterTextMu {
  moveto
  /text2 exch def     % save second string
  /text1 exch def     % save first string
  /Helvetica findfont 7 scalefont setfont
  text1 stringwidth pop  % width of first string
  text2 stringwidth pop  % width of second string
  (\155) stringwidth pop % width of mu
  add add               % width of 2 strings plus mu on stack
  2 div 0 exch sub      % 0-x/2 on stack
  0 rmoveto
  /Helvetica findfont 7 scalefont setfont
  text1 show
  /Symbol findfont 7 scalefont setfont
  (\155) show
  /Helvetica findfont 7 scalefont setfont
  text2 show
} def

% Expects x y scale on the stack
/ARMlogo {
  gsave
  translate
  dup scale
  0.08 0.43 0.53 setrgbcolor

  newpath
  10 10 moveto
  50 10 lineto
  60 38 lineto
  70 62 lineto
  93 117 lineto
  117 62 lineto
  70 62 lineto
  60 38 lineto
  127 38 lineto
  140 10 lineto
  180 10 lineto
  113 150 lineto
  70 150 lineto
  closepath
  fill

  newpath
  188 10 moveto
  226 10 lineto
  226 125 lineto
  250 125 lineto
  250 109 16 90 270 arcn
  250 93 lineto
  226 93 lineto
  226 67 lineto
  245 67 254 56 12 arcto
  278 10 lineto
  318 10 lineto
  278 80 lineto 
  260 109 41 270 90 arc
  188 150 lineto
  closepath
  fill

  newpath
  330 10 moveto
  367 10 lineto
  367 96 lineto
  407.5 53 lineto
  413.5 53 lineto
  454 96 lineto
  454 10 lineto
  490 10 lineto
  490 150 lineto
  454 150 lineto
  410.5 100 lineto
  367 150 lineto
  330 150 lineto
  closepath
  fill

  newpath
  1.5 setlinewidth
  507.5 142.5 7.5 0 360 arc
  stroke
  503 138 moveto
  /Helvetca-Bold findfont 12 scalefont setfont
  (R) show

  grestore
} def

% ShortCopyright will center a copyright message
% at the bottom of the page.
% Expects date page-string xcenter y on the stack
/ShortCopyright {
  /y exch def
  /xc exch def
  /page exch def
  /d exch def
  /Helvetica findfont 7 scalefont setfont
  (TSMC CLN65LP 65nm Process ROM, ROM-VIA Datasheet, Version r0p0) xc y CenterText
  /y y 10 sub def
  (Copyright 1993-2018 ARM. All Rights Reserved.) xc y CenterText
  /y y 10 sub def
  page xc y CenterText

  % Instance name on left
  line_left y 10 add moveto
  (rom4096x32m8 ) show
  d show

  % Logo on right
} def


% SymbolStart begins the part symbol
% Expects xUpperLeft yUpperLeft inPins outPins on stack
/SymbolStart {
  /symbolOutPins exch def
  /symbolInPins exch def
  /symbolY exch def
  /symbolX exch def
  /symbolCapHeight 20 def
  /symbolWidth 90 def
  /symbolPinLength 10 def
  /symbolPinSpacing 12 def
  /symbolInY symbolY symbolCapHeight sub def
  /symbolOutY
    symbolInPins symbolOutPins sub 2 div
    symbolPinSpacing mul
    symbolY exch sub symbolCapHeight sub
    def

  % box of symbol
  newpath
  symbolX symbolY moveto
  symbolWidth 0 rlineto
  symbolCapHeight 2 mul
  symbolInPins 1 sub symbolPinSpacing mul add
  0 exch sub
  0 exch rlineto
  0 symbolWidth sub 0 rlineto
  closepath
  2 setlinewidth
  stroke

  /symbolY symbolY symbolCapHeight 2 mul sub 
    symbolInPins 1 sub symbolPinSpacing mul sub
    def

} def

% SymbolEnd completes the part symbol
% Expects nothing on the stack
% Returns bottom of the symbol on the stack
/SymbolEnd {
  symbolY 12 sub symbolPinLength sub
} def

% SymbolInput puts an input pin on the part
% Expects pinName on the stack
/SymbolInput {
  dup () ne {
    % print nonblank pin
    newpath
    symbolX symbolInY moveto 
    0 symbolPinLength sub 0 rlineto
    0.5 setlinewidth
    stroke
    symbolX symbolInY moveto 
    0 symbolPinLength sub 0 rmoveto
    -2 -3 rmoveto
    dup stringwidth pop 0 exch sub
    0 rmoveto
    show
  } {
    % ignore blank pin
    pop
  } ifelse
  /symbolInPins symbolInPins 1 sub def
  /symbolInY symbolInY symbolPinSpacing sub def
} def

% SymbolOutput puts an output pin on the part
% Expects pinName on the stack
/SymbolOutput {
  dup () ne {
    newpath
    symbolX symbolOutY moveto 
    symbolWidth 0 rmoveto 
    symbolPinLength  0 rlineto
    0.5 setlinewidth
    stroke
    symbolX symbolOutY moveto 
    symbolWidth 0 rmoveto 
    symbolPinLength 0 rmoveto 
    2 -3 rmoveto
    show
  } {
    pop
  } ifelse
  /symbolOutPins symbolOutPins 1 sub def
  /symbolOutY symbolOutY symbolPinSpacing sub def
} def

% Put triangle inside, line down and string
% Expects string x y (left/right) on stack
/SymbolTriangle {
  /l exch def
  /y exch def
  /x exch def
  newpath
  x y moveto
  -3 0 rmoveto
  3 6 rlineto
  3 -6 rlineto
  0.5 setlinewidth
  stroke
  newpath
  x y moveto
  0 0 symbolPinLength sub rlineto
  stroke
  x y moveto
  0 0 symbolPinLength sub rmoveto
  0 -12 rmoveto
  l (left) eq {
    dup stringwidth pop 0 exch sub 0 rmoveto
  } if
  l (center) eq {
    dup stringwidth pop 2 div 0 exch sub 0 rmoveto
  } if
  show
} def

% SymbolClocks puts two clock pins on the bottom of the part
% Expects pinName pinName on the stack
/SymbolClocks {
  symbolX symbolWidth 2 mul 3 div add
  symbolY (right) SymbolTriangle    % string x y dir on stack
  symbolX symbolWidth 3 div add
  symbolY (left) SymbolTriangle    % string x y dir on stack
} def

% SymbolClock puts one clock pin on the bottom of the part
% Expects pinName on the stack
/SymbolClock {
  symbolX symbolWidth 2 div add
  symbolY (center) SymbolTriangle    % string x y dir on stack
} def

% Waves for frame number 1
% 82 paths, 23 strings
% Expects x y on stack
% bounds: 0.0->347.714  0.0->161.373
/Frame8 {
  gsave
  translate
  newpath
  109.056 149.831 moveto
  109.056 127.46 lineto
  0.5 setlinewidth
  stroke
  newpath
  54.056 159.831 moveto
  54.056 92.1984 lineto
  stroke
  newpath
  16.556 127.46 moveto
  49.056 127.46 lineto
  59.056 142.46 lineto
  104.056 142.46 lineto
  114.056 127.46 lineto
  159.056 127.46 lineto
  169.056 142.46 lineto
  214.056 142.46 lineto
  224.056 127.46 lineto
  269.056 127.46 lineto
  279.056 142.46 lineto
  324.056 142.46 lineto
  334.056 127.331 lineto
  346.556 127.331 lineto
  stroke
  newpath
  54.056 147.331 moveto
  109.056 147.331 lineto
  stroke
  54.056 147.331 ArrowLeft
  109.056 147.331 ArrowRight
  newpath
  109.056 147.331 moveto
  164.056 147.331 lineto
  stroke
  109.056 147.331 ArrowLeft
  164.056 147.331 ArrowRight
  newpath
  274.056 159.831 moveto
  274.056 114.073 lineto
  stroke
  newpath
  219.056 152.331 moveto
  219.056 127.46 lineto
  stroke
  newpath
  164.056 159.831 moveto
  164.056 121.194 lineto
  stroke
  newpath
  164.056 147.331 moveto
  219.056 147.331 lineto
  stroke
  164.056 147.331 ArrowLeft
  219.056 147.331 ArrowRight
  newpath
  219.056 147.331 moveto
  274.056 147.331 lineto
  stroke
  219.056 147.331 ArrowLeft
  274.056 147.331 ArrowRight
  newpath
  296.556 22.5 moveto
  296.556 0.1296 lineto
  stroke
  newpath
  76.556 22.5 moveto
  76.556 0.1296 lineto
  stroke
  newpath
  71.556 15 moveto
  16.556 15 lineto
  stroke
  newpath
  16.556 15 moveto
  71.556 15 lineto
  81.556 0 lineto
  161.556 0 lineto
  stroke
  newpath
  16.556 0 moveto
  71.556 0 lineto
  81.556 15 lineto
  161.556 15 lineto
  stroke
  newpath
  281.556 15 moveto
  291.556 15 lineto
  301.556 0 lineto
  311.556 0 lineto
  stroke
  newpath
  281.556 0 moveto
  291.556 0 lineto
  301.556 15 lineto
  311.556 15 lineto
  stroke
  newpath
  160.635 15 moveto
  288.635 15 lineto
  stroke
  newpath
  160.635 0 moveto
  288.635 0 lineto
  stroke
  newpath
  306.556 15 moveto
  346.556 15 lineto
  stroke
  newpath
  306.556 0 moveto
  346.556 0 lineto
  stroke
  newpath
  54.056 28.176 moveto
  54.056 17.5 lineto
  stroke
  newpath
  274.056 29.4264 moveto
  274.056 17.5 lineto
  stroke
  newpath
  274.068 20.0248 moveto
  296.548 20.0248 lineto
  stroke
  274.068 20.0248 ArrowLeft
  296.548 20.0248 ArrowRight
  newpath
  54.068 20.0248 moveto
  76.548 20.0248 lineto
  stroke
  54.068 20.0248 ArrowLeft
  76.548 20.0248 ArrowRight
  newpath
  164.1 157.331 moveto
  274.056 157.331 lineto
  stroke
  164.1 157.331 ArrowLeft
  274.056 157.331 ArrowRight
  newpath
  54.388 157.325 moveto
  164.344 157.325 lineto
  stroke
  54.388 157.325 ArrowLeft
  164.344 157.325 ArrowRight
  newpath
  17.0584 96.2656 moveto
  27.0584 81.2656 lineto
  stroke
  newpath
  27.0584 96.2656 moveto
  37.0584 81.2656 lineto
  stroke
  newpath
  17.0584 81.2656 moveto
  27.0584 96.2656 lineto
  stroke
  newpath
  27.0584 81.2656 moveto
  37.0584 96.2656 lineto
  stroke
  newpath
  42.0584 101.266 moveto
  54.7592 101.266 lineto
  stroke
  42.0584 101.266 ArrowLeft
  54.7592 101.266 ArrowRight
  newpath
  37.0512 96.1016 moveto
  47.712 81.4704 lineto
  stroke
  newpath
  280.423 81.3088 moveto
  47.6088 81.3088 lineto
  stroke
  newpath
  36.9128 96.0328 moveto
  16.7032 96.0328 lineto
  stroke
  newpath
  37.1552 81.3104 moveto
  16.9456 81.3104 lineto
  stroke
  newpath
  37.2592 81.3096 moveto
  42.2952 88.1368 lineto
  stroke
  newpath
  280.628 81.1944 moveto
  293.337 97.0968 lineto
  stroke
  newpath
  42.2504 109.559 moveto
  42.2504 78.2936 lineto
  stroke
  newpath
  286.695 108.136 moveto
  286.695 80.2208 lineto
  stroke
  newpath
  17.7008 52.0432 moveto
  27.7008 37.0432 lineto
  stroke
  newpath
  27.7008 52.0432 moveto
  37.7008 37.0432 lineto
  stroke
  newpath
  17.7008 37.0432 moveto
  27.7008 52.0432 lineto
  stroke
  newpath
  27.7008 37.0432 moveto
  37.7008 52.0432 lineto
  stroke
  newpath
  42.7008 57.0432 moveto
  55.2008 57.0432 lineto
  stroke
  42.7008 57.0432 ArrowLeft
  55.2008 57.0432 ArrowRight
  newpath
  55.2008 74.6728 moveto
  55.2008 54.5432 lineto
  stroke
  newpath
  37.1032 51.8104 moveto
  16.8936 51.8104 lineto
  stroke
  newpath
  37.2424 37.5048 moveto
  17.0328 37.5048 lineto
  stroke
  newpath
  37.624 37.6432 moveto
  47.9784 53.1544 lineto
  stroke
  newpath
  181.046 53.0584 moveto
  47.8336 53.0584 lineto
  stroke
  newpath
  37.4232 51.488 moveto
  47.4232 36.488 lineto
  stroke
  newpath
  180.63 37.0864 moveto
  46.7224 37.0864 lineto
  stroke
  newpath
  181.174 37.3416 moveto
  191.826 53.6144 lineto
  stroke
  newpath
  181.174 53.1432 moveto
  192.296 36.5096 lineto
  stroke
  newpath
  192.283 36.7752 moveto
  202.882 53.0144 lineto
  stroke
  newpath
  213.481 36.7752 moveto
  224.08 53.0144 lineto
  stroke
  newpath
  224.08 36.7752 moveto
  234.678 53.0144 lineto
  stroke
  newpath
  234.678 36.7752 moveto
  245.278 52.8744 lineto
  stroke
  newpath
  202.882 36.7752 moveto
  213.481 53.0144 lineto
  stroke
  newpath
  192.283 53.0144 moveto
  202.882 36.7752 lineto
  stroke
  newpath
  202.882 53.0144 moveto
  213.481 36.7752 lineto
  stroke
  newpath
  213.481 53.0144 moveto
  224.08 36.7752 lineto
  stroke
  newpath
  224.08 53.0144 moveto
  234.678 36.7752 lineto
  stroke
  newpath
  234.678 53.1544 moveto
  245.278 36.7752 lineto
  stroke
  newpath
  257.435 36.392 moveto
  191.602 36.392 lineto
  stroke
  newpath
  256.88 53.176 moveto
  191.462 53.176 lineto
  stroke
  newpath
  41.9712 65.0152 moveto
  41.9712 39.4544 lineto
  stroke
  newpath
  273.962 111.47 moveto
  273.962 77.4096 lineto
  stroke
  newpath
  333.028 96.8888 moveto
  293.13 96.8888 lineto
  stroke
  newpath
  266.046 53.3824 moveto
  347.714 53.3824 lineto
  stroke
  newpath
  267.296 37.028 moveto
  346.88 37.028 lineto
  stroke
  newpath
  163.778 68.8888 moveto
  163.778 50.8488 lineto
  stroke
  newpath
  185.895 65.42 moveto
  185.895 42.0864 lineto
  stroke
  newpath
  262.84 58.1544 moveto
  275.34 58.1544 lineto
  stroke
  262.84 58.1544 ArrowLeft
  275.34 58.1544 ArrowRight
  newpath
  274.15 75.188 moveto
  274.15 55.0592 lineto
  stroke
  newpath
  262.111 66.1264 moveto
  262.111 40.5656 lineto
  stroke
  newpath
  256.88 36.9264 moveto
  267.001 53.4752 lineto
  stroke
  newpath
  257.146 53.0152 moveto
  267.435 36.7872 lineto
  stroke
  newpath
  245.291 36.9264 moveto
  257.007 53.1544 lineto
  stroke
  newpath
  245.428 52.7376 moveto
  255.979 36.9264 lineto
  stroke
  newpath
  274.518 101.887 moveto
  287.218 101.887 lineto
  stroke
  274.518 101.887 ArrowLeft
  287.218 101.887 ArrowRight
  newpath
  166.416 56.5272 moveto
  186.124 56.5272 lineto
  stroke
  166.416 56.5272 ArrowLeft
  186.124 56.5272 ArrowRight
  /Times-Roman findfont 10 scalefont setfont
  (CLK) () 0 131.711 LeftLabel
  /Times-Roman findfont 10 scalefont setfont
  (CEN) () 0.6944 86.068 LeftLabel
  /Times-Roman findfont 10 scalefont setfont
  (  ) () 0 50.9288 LeftLabel
  /Times-Roman findfont 10 scalefont setfont
  (A[j]) () 0 44.2512 LeftLabel
  /Times-Roman findfont 10 scalefont setfont
  (Q) () 0 3.7056 LeftLabel
  /Times-Roman findfont 7 scalefont setfont
  (t) (ckh) 81.556 150.669 CenterLabel
  /Times-Roman findfont 7 scalefont setfont
  (t) (ckl) 136.556 150.669 CenterLabel
  /Times-Roman findfont 7 scalefont setfont
  (t) (ckh) 191.556 150.669 CenterLabel
  /Times-Roman findfont 7 scalefont setfont
  (t) (ckl) 246.556 150.669 CenterLabel
  /Times-Roman findfont 7 scalefont setfont
  (t) (cyc_ema2ken1) 109.056 161.373 CenterLabel
  /Times-Roman findfont 7 scalefont setfont
  (t) (cyc_ema2ken1) 219.056 161.373 CenterLabel
  /Times-Roman findfont 7 scalefont setfont
  (Q1) () 86.556 6.5424 RightLabel
  /Times-Roman findfont 7 scalefont setfont
  (Q2) () 306.556 7.2888 RightLabel
  /Times-Roman findfont 7 scalefont setfont
  (t) (accq_ema2ken1) 65.3056 23.708 CenterLabel
  /Times-Roman findfont 7 scalefont setfont
  (t) (accq_ema2ken1) 285.306 23.5792 CenterLabel
  /Times-Roman findfont 7 scalefont setfont
  (t) (cens) 49.4192 106.882 CenterLabel
  /Times-Roman findfont 7 scalefont setfont
  (t) (cenh) 296.503 107.194 CenterLabel
  /Times-Roman findfont 7 scalefont setfont
  (ADDR1) () 108.951 44.2024 CenterLabel
  /Times-Roman findfont 7 scalefont setfont
  (t) (as) 48.9504 63.2144 CenterLabel
  /Times-Roman findfont 7 scalefont setfont
  (ADDR2) () 283.257 44.8968 CenterLabel
  /Times-Roman findfont 6.432 scalefont setfont
  (t) (ah) 174.506 61.5584 CenterLabel
  /Times-Roman findfont 7 scalefont setfont
  (t) (as) 269.09 64.3256 CenterLabel
  grestore
} def
%%EndProlog
%%Page: 1 1
%%BeginPageSetup
/pagelevel save def
%%EndPageSetup
gsave
/leftmargin 165 def
/rightmargin 570 def
/pagey 740 def
/title_size 14 def
/centerx 300 def
/footery 56 def
/text_size 10 def
/pagey pagey 18 sub def
/Helvetica-Bold findfont title_size scalefont setfont
(High Density Via ROM RVT RVT Compiler) rightmargin pagey LeftShow
/pagey pagey 18 sub def
(TSMC CLN65LP 65nm Process ROM) rightmargin pagey LeftShow
/pagey pagey 18 sub def
(4096 Words X 32 Bits, Mux 8 Instance) rightmargin pagey LeftShow
/pagey pagey 18 sub def

0.35 50 650 ARMlogo
/pagey pagey 20 sub def
/text_size 10 def
(Overview) () pagey SectionStart
/pagey exch def

leftmargin rightmargin pagey 12 TextStart
/TextFont /Helvetica findfont text_size scalefont def
TextParaStart
(The Synchronous Single-Port Rom is optimized for speed and density.\
 The memory is designed to take full advantage of the ) TextPiece

(TSMC) TextPiece
( 65nmnm) TextReserveSpace
( 65nm) TextPiece
( CLN65LP CMOS process.) TextPiece
TextParaEnd
() TextLine
TextParaStart
(The storage array is composed of one-transistor\
 bit cells with fully static circuitry. The\
 ROM\
 operates at a voltage of 1.08V) TextPiece
( and a junction temperature of ) TextPiece
(-40.01C) TextReserveSpace
(-40.0) TextPiece
TextDegree
(C.) TextPiece
TextParaEnd
TextEnd % returns new page y
/pagey exch def
% spaceLeft before Instance Settings 492
/text_size 10 def
(Instance Settings) () pagey SectionStart
/pagey exch def

/TextFont /Helvetica-Bold findfont text_size scalefont def
200
(CLN65LP) stringwidth pop 15 add 100 1 index 1 index
 lt { exch pop } { pop } ifelse
leftmargin pagey 14 Table2Start
(Parameter) (Setting) Table2Header
Table2DoubleLine
/TextFont /Helvetica findfont text_size scalefont def
(Instance Name) (rom4096x32m8) Table2LC
(Process) (CLN65LP) Table2LC
(Words) (4096) Table2LC
(Bits) (32) Table2LC
(Mux) (8) Table2LC
(Activity_factor) (50) Table2LC
(Extra Margin Adjustment) (on) Table2LC
(BIST Muxes) (on) Table2LC
(Output Drive) (6) Table2LC
(Power Routing Type) (otc) Table2LC
(Top Metal) (M5-M10) Table2LC
(Frequency) (100 MHz) Table2LC
(Power Gating) (on) Table2LC
(Back Biasing) (off) Table2LC
Table2End % returns the new y
/pagey exch def
% spaceLeft before description 262
(Description) () pagey SectionStart
/pagey exch def
% spaceLeft before description text begins 242

leftmargin rightmargin pagey 12 TextStart
/TextFont /Helvetica findfont text_size scalefont def
( ROM access is synchronous and is triggered by the rising-edge of the clock, CLK. \
The read port input address and chip enable are latched by the rising-edge of CLK, \ 
respecting individual setup and hold times.) TextLine
TextEnd
/pagey exch def
leftmargin rightmargin pagey 12 TextStart
/TextFont /Helvetica findfont text_size scalefont def
() TextLine
( A read cycle is initiated if CEN is asserted at the rising-edge of CLK. The \
contents of the location specified by the address, A, are driven on the data \
output bus, Q. The ROM is allowed to access non-existing physical addresses, \
but the outputs will be unknown.) TextLine
TextEnd
/pagey exch def
leftmargin rightmargin pagey 12 TextStart
/TextFont /Helvetica findfont text_size scalefont def
() TextLine
( Power dissipation is minimized using static circuit implementations. A standby \
mode is provided to further reduce power dissipation during periods of \
non-operation \(CEN=1\). While in standby mode, address inputs are disabled \
and a read will not occur. Data outputs will remain stable.) TextLine
TextEnd
/pagey exch def
% spaceLeft beginning paragraph 98
leftmargin rightmargin pagey 12 TextStart
/TextFont /Helvetica findfont text_size scalefont def
() TextLine
( If the KEN=0, the keepers on the bitlines will be enabled. \
This will be useful for high leakage corners as it will stop the bitlines from falling due to leakage.) TextLine
TextEnd
/pagey exch def
% spaceLeft beginning paragraph 68
leftmargin rightmargin pagey 12 TextStart
/TextFont /Helvetica findfont text_size scalefont def
() TextLine
( Extra Margin Adjustment provides the option of adding delays into internal timing pulse. \
This delay provides extra time for putting the design to rest. It will not affect the memory.) TextLine
TextEnd
/pagey exch def

% spaceLeft beginning paragraph 38
() (1) centerx footery ShortCopyright
grestore 
pagelevel restore
showpage
%%Page: 2 2
%%BeginPageSetup
/pagelevel save def
%%EndPageSetup
gsave
/leftmargin 165 def
/rightmargin 540 def
/pagey 740 def
/title_size 14 def
/centerx 300 def
/footery 56 def
/text_size 10 def
/text_size 10 def
(Description) (cont) pagey SectionStart
/pagey exch def
/pagey pagey 6 sub def
leftmargin rightmargin pagey 12 TextStart
/TextFont /Helvetica findfont text_size scalefont def
() TextLine
( One of the inputs of the input BIST MUX is connected to system signals while other \
is connected to the BIST outputs.) TextLine
TextEnd
/pagey exch def
leftmargin rightmargin pagey 12 TextStart
/TextFont /Helvetica findfont text_size scalefont def
() TextLine
( The bypass MUXes are added before the output pins Q. \
These allow the test tools to have the direct controllability of the shadow logic, without \
going through the memory.) TextLine
TextEnd
/pagey exch def
% spaceLeft beginning paragraph 584
leftmargin rightmargin pagey 12 TextStart
/TextFont /Helvetica findfont text_size scalefont def
() TextLine
( Power gated mode is enabled when the PGEN input is set high.) TextLine
TextEnd
/pagey exch def


leftmargin rightmargin pagey 12 TextStart
/TextFont /Helvetica findfont text_size scalefont def
() TextLine
% spaceLeft beginning paragraph 560
(Refer to the user guide for a more detailed description\
 of memory operation.) TextLine
TextEnd
/pagey exch def
/text_size 10 def
(Physical Dimensions) pagey MicronSectionStart
/pagey exch def

/pagey pagey 15 sub def
75 75 75 75 leftmargin pagey 14 Table4Start
/TextFont /Helvetica-Bold findfont text_size scalefont def
(Area Type) (Width)(m)() (Height)(m)() (Area)(m)(2) Table4Header
/TextFont /Helvetica findfont text_size scalefont def
(Core) (164.665) (199.185) (32798.8) Table4LC
Table4End
/pagey exch def

leftmargin rightmargin pagey 10 TextStart
/TextFont /Helvetica findfont 8 scalefont def
(All width, height, and area dimensions are in drawn dimensions.\
 For shrink processes, this will be larger than the final silicon\
 post-shrink dimensions.) TextLine
TextEnd
/pagey exch def
/pagey pagey 20 sub def
(Symbol) () pagey SectionStart
/pagey exch def

/pagey pagey 20 sub def
/Helvetica findfont text_size scalefont setfont
255 pagey 10 3 SymbolStart
(CEN) SymbolInput
(A[11:0]) SymbolInput
(EMA[2:0]) SymbolInput
(TEN) SymbolInput
(BEN) SymbolInput
(TCEN) SymbolInput
(TA[11:0]) SymbolInput
(TQ[31:0]) SymbolInput
(PGEN) SymbolInput
(KEN) SymbolInput
(CENY) SymbolOutput
(AY[11:0]) SymbolOutput
(Q[31:0]) SymbolOutput
(CLK) SymbolClock
SymbolEnd
/pagey exch def
() (2) centerx footery ShortCopyright
grestore 
pagelevel restore
showpage
%%Page: 3 3
%%BeginPageSetup
/pagelevel save def
%%EndPageSetup
gsave
/leftmargin 165 def
/rightmargin 540 def
/pagey 740 def
/title_size 14 def
/centerx 300 def
/footery 56 def
/text_size 10 def
/text_size 10 def
(Pin Description) () pagey SectionStart
/pagey exch def

80 220 leftmargin pagey 14 Table2Start
/TextFont /Helvetica-Bold findfont text_size scalefont def
(Pin) (Description) Table2Header
/TextFont /Helvetica findfont text_size scalefont def
(A[11:0]) (Address \(A[0] = LSB\)) Table2LL
(CLK) (Read Clock) Table2LL
(CEN) (Read Enable \(active low\)) Table2LL
(EMA[2:0]) (Margin Adjustment \(EMA[0] = LSB\)) Table2LL
(TEN) (Test Mode Enable \(active low\)) Table2LL
(TA[11:0]) (Address Test Input \(TA[0]\)) Table2LL
(TCEN) (Chip Enable Test Input \(active low\)) Table2LL
(BEN) (Bypass Mode Enable \(active low\)) Table2LL
(TQ[31:0]) (Test mux Q Input \(TQ[0] = LSB\)) Table2LL
(PGEN) (Power Gating Input \(active high\)) Table2LL
(KEN) (Keeper enable \(active low\)) Table2LL
(Q[31:0]) (Data Outputs \(Q[0] = LSB\)) Table2LL
(AY[11:0]) (Address Mux Output\(AY[0]\)) Table2LL
(CENY) (Chip Enable Mux Output) Table2LL
Table2End
/pagey exch def

/pagey pagey 10 sub def
/text_size 10 def
(Read Cycle Timing) () pagey SectionStart
/pagey exch def
/pagey pagey 12 sub def
line_left line_right pagey 12 TextStart
/TextFont /Helvetica findfont 10 scalefont def
/TextSuperscriptFont /Helvetica findfont 10 scalefont def
(The retain timing arc is not shown in this diagram. \
Please refer to the User Guide for this compiler for a detailed timing \
diagram with the retain arc.) TextLine
TextEnd
/pagey pagey 10 sub def
leftmargin pagey 250 sub Frame8
/pagey pagey 250 sub def
% headerEstimate=146
% estimate=140
% tailEstimate=84
% spaceLeft=120
() (3) centerx footery ShortCopyright
grestore 
pagelevel restore
showpage
%%Page: 4 4
%%BeginPageSetup
/pagelevel save def
%%EndPageSetup
gsave
/leftmargin 165 def
/rightmargin 540 def
/pagey 740 def
/title_size 14 def
/centerx 300 def
/footery 56 def
/text_size 10 def
(Default Timing for Cycle and Access) (units = ns) pagey SectionStart
/pagey exch def

/pagey pagey 12 sub def
% Make the text paragraph the same size as the following table
line_left line_right pagey 12 TextStart
/TextFont /Helvetica findfont 10 scalefont def
/TextSuperscriptFont /Helvetica findfont 10 scalefont def
(The timing tables shows delay values measured from\
 50% of supply to\
 50% of supply voltage.\
 The output pins are loaded with the standard load of 0.035pF.\
 Input pins are driven with a standard slew of 0.100ns from\
 10% to\
 90% of supply voltage.) TextLine
(The timing and power values are measured at input slew of 0.1ns on clock pin,\
 0.1ns on signal pins and output load 0.035pF. Default timing table is represented \
when EMA=2, KEN=1. Detailed timing information can be obtained in corresponding tables.) TextLine
TextEnd
/pagey exch def

/pagey pagey 12 sub def

TableT1CornerStart
TableT1CornerHeader
(Read Cycle) () (t) (cyc_ema2ken1)  (3.309) ()  TableT1CornerRow
(Read Access[Q]) (1,2) (t) (accq_ema2ken1) (0.537) (2.191) TableT1CornerRow
(Clock high) () (t) (ckh) (0.223) () TableT1CornerRow
(Clock low) () (t) (ckl) (0.235) () TableT1CornerRow
(Max Clock Transition) () (t) (ckr) () (0.75)  TableT1CornerRow
(Output load factor[Q]) (1) (K) (load_q) () (1.025) TableT1CornerRow
TableT1CornerEnd
/pagey exch def

/pagey pagey 4 sub def
line_left 2 add rightmargin pagey 10 TextStart
/TextFont /Helvetica findfont 8 scalefont def
/TextSuperscriptFont /Helvetica findfont 8 scalefont def
(M) TextIndent
TextParaStart
(1) TextSuperscript
/TextFont /Helvetica-Oblique findfont 8 scalefont def
(Output delays and a load dependency \(Kload\) which is\
 used to calculate:) TextPiece
/TextFont /Helvetica-Oblique findfont 8 scalefont def
(TotalDelay = FixedDelay + \(Kload x Cload\).) TextPiece
/TextFont /Helvetica findfont 8 scalefont def
TextParaEnd
TextParaStart
(2) TextSuperscript
/TextFont /Helvetica-Oblique findfont 8 scalefont def
(Max access time is defined as the longest possible delay to\
 valid output and min access time is defined as \
 the shortest possible delay.) TextPiece
TextParaEnd
TextParaStart
TextEnd
/pagey exch def
% after table spaceLeft=356
% headerEstimate=110
% estimate=42
% tailEstimate=64
% spaceLeft=356
(Load Timing) (units = ns/pF) pagey SectionStart
/pagey exch def

/pagey pagey 12 sub def
% Make the text paragraph the same size as the following table
line_left line_right pagey 12 TextStart
/TextFont /Helvetica findfont 10 scalefont def
/TextSuperscriptFont /Helvetica findfont 10 scalefont def
TextEnd
/pagey exch def

/pagey pagey 12 sub def

TableT1CornerStart
TableT1CornerHeader
(CENY load factor) () (K) (load_ceny) () (2.291) TableT1CornerRow
(AY load factor) () (K) (load_ay) () (2.463) TableT1CornerRow
(Q load factor) () (K) (load_q) () (1.025) TableT1CornerRow
TableT1CornerEnd
/pagey exch def

/pagey pagey 4 sub def
line_left 2 add rightmargin pagey 10 TextStart
/TextFont /Helvetica findfont 8 scalefont def
/TextSuperscriptFont /Helvetica findfont 8 scalefont def
(M) TextIndent
TextParaStart
(1) TextSuperscript
/TextFont /Helvetica-Oblique findfont 8 scalefont def
(The output load factor units are ns/pF.) TextPiece
TextParaEnd
TextEnd
/pagey exch def
% headerEstimate=110
% estimate=448
% tailEstimate=64
% spaceLeft=140
() (4) centerx footery ShortCopyright
grestore 
pagelevel restore
showpage
%%Page: 5 5
%%BeginPageSetup
/pagelevel save def
%%EndPageSetup
gsave
/leftmargin 165 def
/rightmargin 540 def
/pagey 740 def
/title_size 14 def
/centerx 300 def
/footery 56 def
/text_size 10 def
(Setup and Hold Timing) (units = ns) pagey SectionStart
/pagey exch def

/pagey pagey 12 sub def
% Make the text paragraph the same size as the following table
line_left line_right pagey 12 TextStart
/TextFont /Helvetica findfont 10 scalefont def
/TextSuperscriptFont /Helvetica findfont 10 scalefont def
TextEnd
/pagey exch def

/pagey pagey 12 sub def

TableT1CornerStart
TableT1CornerHeader
(A setup) () (t) (as) (0.437) () TableT1CornerRow
(A hold) () (t) (ah) (0.250) () TableT1CornerRow
(CEN setup) () (t) (cens) (0.477) () TableT1CornerRow
(CEN hold) () (t) (cenh) (0.253) () TableT1CornerRow
(KEN setup) () (t) (kens) (3.278) () TableT1CornerRow
(KEN hold) () (t) (kenh) (3.816) () TableT1CornerRow
(EMA setup) () (t) (emas) (3.277) () TableT1CornerRow
(EMA hold) () (t) (emah) (3.816) () TableT1CornerRow
(TEN setup) () (t) (tens) (0.613) () TableT1CornerRow
(TEN hold) () (t) (tenh) (0.253) () TableT1CornerRow
(TCEN setup) () (t) (tcens) (0.477) () TableT1CornerRow
(TCEN hold) () (t) (tcenh) (0.253) () TableT1CornerRow
(TA setup) () (t) (tas) (0.437) () TableT1CornerRow
(TA hold) () (t) (tah) (0.250) () TableT1CornerRow
(PGEN setup) () (t) (pgens) (3.786) () TableT1CornerRow
(PGEN hold) () (t) (pgenh) (3.282) () TableT1CornerRow
(PGEN rise to) (TCEN rise hold) () (t) (pgen_tcenh) (1.488) () TableT1CornerDRow
(PGEN fall to) (TCEN rise hold) () (t) (pgen_tcenh) (1.488) () TableT1CornerDRow
(TCEN fall to) (PGEN fall hold) () (t) (tcen_pgenh) (9.835) () TableT1CornerDRow
(TCEN fall to) (PGEN rise hold) () (t) (tcen_pgenh) (3.279) () TableT1CornerDRow
(PGEN rise to) (CEN rise hold) () (t) (pgen_cenh) (1.488) () TableT1CornerDRow
(PGEN fall to) (CEN rise hold) () (t) (pgen_cenh) (1.488) () TableT1CornerDRow
(CEN fall to) (PGEN fall hold) () (t) (cen_pgenh) (9.835) () TableT1CornerDRow
(CEN fall to) (PGEN rise hold) () (t) (cen_pgenh) (3.279) () TableT1CornerDRow
TableT1CornerEnd
/pagey exch def

/pagey pagey 4 sub def
line_left 2 add rightmargin pagey 10 TextStart
/TextFont /Helvetica findfont 8 scalefont def
/TextSuperscriptFont /Helvetica findfont 8 scalefont def
(M) TextIndent
TextEnd
/pagey exch def
% after table spaceLeft=48
% headerEstimate=82
% estimate=896
% tailEstimate=44
% spaceLeft=48
() (5) centerx footery ShortCopyright
grestore 
pagelevel restore
showpage
%%Page: 6 6
%%BeginPageSetup
/pagelevel save def
%%EndPageSetup
gsave
/leftmargin 165 def
/rightmargin 540 def
/pagey 740 def
/title_size 14 def
/centerx 300 def
/footery 56 def
/text_size 10 def
/Helvetica-Bold findfont text_size scalefont setfont
(Cycle and Access Timing for Different Values of Extra Margin Adjustment)
(units = ns) pagey SectionStart
/pagey exch def

/pagey pagey 20 sub def
TableT1CornerStart
TableT1CornerHeader
(Read Cycle) (EMA=0 KEN=0) () (t) (cyc_ema0ken0)  (3.587) ()  TableT1CornerDRow
(Read Cycle) (EMA=0 KEN=1) () (t) (cyc_ema0ken1)  (3.046) ()  TableT1CornerDRow
(Read Cycle) (EMA=1 KEN=0) () (t) (cyc_ema1ken0)  (3.784) ()  TableT1CornerDRow
(Read Cycle) (EMA=1 KEN=1) () (t) (cyc_ema1ken1)  (3.254) ()  TableT1CornerDRow
(Read Cycle) (EMA=2 KEN=0) () (t) (cyc_ema2ken0)  (3.838) ()  TableT1CornerDRow
(Read Cycle) (EMA=2 KEN=1) () (t) (cyc_ema2ken1)  (3.309) ()  TableT1CornerDRow
(Read Cycle) (EMA=3 KEN=0) () (t) (cyc_ema3ken0)  (3.916) ()  TableT1CornerDRow
(Read Cycle) (EMA=3 KEN=1) () (t) (cyc_ema3ken1)  (3.389) ()  TableT1CornerDRow
(Read Cycle) (EMA=4 KEN=0) () (t) (cyc_ema4ken0)  (4.074) ()  TableT1CornerDRow
(Read Cycle) (EMA=4 KEN=1) () (t) (cyc_ema4ken1)  (3.546) ()  TableT1CornerDRow
(Read Cycle) (EMA=5 KEN=0) () (t) (cyc_ema5ken0)  (4.152) ()  TableT1CornerDRow
(Read Cycle) (EMA=5 KEN=1) () (t) (cyc_ema5ken1)  (3.624) ()  TableT1CornerDRow
(Read Cycle) (EMA=6 KEN=0) () (t) (cyc_ema6ken0)  (4.208) ()  TableT1CornerDRow
(Read Cycle) (EMA=6 KEN=1) () (t) (cyc_ema6ken1)  (3.679) ()  TableT1CornerDRow
(Read Cycle) (EMA=7 KEN=0) () (t) (cyc_ema7ken0)  (4.286) ()  TableT1CornerDRow
(Read Cycle) (EMA=7 KEN=1) () (t) (cyc_ema7ken1)  (3.757) ()  TableT1CornerDRow
(Read Access) (EMA=0 KEN=0) () (t) (accq_ema0ken0) (0.537) (2.250) TableT1CornerDRow
(Read Access) (EMA=0 KEN=1) () (t) (accq_ema0ken1) (0.537) (2.191) TableT1CornerDRow
(Read Access) (EMA=1 KEN=0) () (t) (accq_ema1ken0) (0.537) (2.250) TableT1CornerDRow
(Read Access) (EMA=1 KEN=1) () (t) (accq_ema1ken1) (0.537) (2.191) TableT1CornerDRow
TableT1CornerEnd
/pagey exch def
() (6) centerx footery ShortCopyright
grestore 
pagelevel restore
showpage
%%Page: 7 7
%%BeginPageSetup
/pagelevel save def
%%EndPageSetup
gsave
/leftmargin 165 def
/rightmargin 540 def
/pagey 740 def
/title_size 14 def
/centerx 300 def
/footery 56 def
/text_size 10 def
/Helvetica-Bold findfont text_size scalefont setfont
(Cycle and Access Timing for Different Values of Extra Margin Adjustment continued) (units = ns) pagey SectionStart
/pagey exch def
/pagey pagey 20 sub def
TableT1CornerStart
TableT1CornerHeader
% spaceLeft=574 after continuation
(Read Access) (EMA=2 KEN=0) () (t) (accq_ema2ken0) (0.537) (2.250) TableT1CornerDRow
(Read Access) (EMA=2 KEN=1) () (t) (accq_ema2ken1) (0.537) (2.191) TableT1CornerDRow
(Read Access) (EMA=3 KEN=0) () (t) (accq_ema3ken0) (0.537) (2.329) TableT1CornerDRow
(Read Access) (EMA=3 KEN=1) () (t) (accq_ema3ken1) (0.537) (2.271) TableT1CornerDRow
(Read Access) (EMA=4 KEN=0) () (t) (accq_ema4ken0) (0.537) (2.487) TableT1CornerDRow
(Read Access) (EMA=4 KEN=1) () (t) (accq_ema4ken1) (0.537) (2.428) TableT1CornerDRow
(Read Access) (EMA=5 KEN=0) () (t) (accq_ema5ken0) (0.537) (2.564) TableT1CornerDRow
(Read Access) (EMA=5 KEN=1) () (t) (accq_ema5ken1) (0.537) (2.506) TableT1CornerDRow
(Read Access) (EMA=6 KEN=0) () (t) (accq_ema6ken0) (0.537) (2.620) TableT1CornerDRow
(Read Access) (EMA=6 KEN=1) () (t) (accq_ema6ken1) (0.537) (2.561) TableT1CornerDRow
(Read Access) (EMA=7 KEN=0) () (t) (accq_ema7ken0) (0.537) (2.698) TableT1CornerDRow
(Read Access) (EMA=7 KEN=1) () (t) (accq_ema7ken1) (0.537) (2.639) TableT1CornerDRow
TableT1CornerEnd
/pagey exch def

/pagey pagey 4 sub def
line_left 2 add rightmargin pagey 10 TextStart
/TextFont /Helvetica findfont 8 scalefont def
/TextSuperscriptFont /Helvetica findfont 8 scalefont def
(M) TextIndent
TextEnd
/pagey exch def
% after table spaceLeft=194
% headerEstimate=82
% estimate=364
% tailEstimate=0
% spaceLeft=194
/Helvetica-Bold findfont text_size scalefont setfont
(Path Delay Timing) (units = ns) pagey SectionStart
/pagey exch def
/pagey pagey 20 sub def
TableT1CornerStart
TableT1CornerHeader
(BEN) (to CENY delay) () (t) (benceny) (0.280) (0.329) TableT1CornerDRow
(BEN) (to AY delay) () (t) (benay) (0.267) (0.314) TableT1CornerDRow
(BEN ) (to Q delay) () (t) (benq) (0.408) (0.480) TableT1CornerDRow
TableT1CornerEnd
/pagey exch def
() (7) centerx footery ShortCopyright
grestore 
pagelevel restore
showpage
%%Page: 8 8
%%BeginPageSetup
/pagelevel save def
%%EndPageSetup
gsave
/leftmargin 165 def
/rightmargin 540 def
/pagey 740 def
/title_size 14 def
/centerx 300 def
/footery 56 def
/text_size 10 def
/Helvetica-Bold findfont text_size scalefont setfont
(Path Delay Timing) (units = ns) pagey SectionStart
/pagey exch def
/pagey pagey 20 sub def
TableT1CornerStart
TableT1CornerHeader
% spaceLeft=588 after continuation
(TQ ) (to Q delay) () (t) (tqq) (0.181) (0.213) TableT1CornerDRow
(TEN ) (to CENY delay) () (t) (tenceny) (0.435) (0.512) TableT1CornerDRow
(CEN ) (to CENY delay) () (t) (cenceny) (0.326) (0.384) TableT1CornerDRow
(TCEN ) (to CENY delay) () (t) (tcenceny) (0.326) (0.384) TableT1CornerDRow
(TEN ) (to AY delay) () (t) (tenay) (0.416) (0.490) TableT1CornerDRow
(A ) (to AY delay) () (t) (aay) (0.301) (0.354) TableT1CornerDRow
(TA ) (to AY delay) () (t) (taay) (0.300) (0.353) TableT1CornerDRow
(PGEN ) (to AY delay) () (t) (pgenay) (6.444) (7.582) TableT1CornerDRow
(PGEN ) (to CENY delay) () (t) (pgenceny) (6.444) (7.582) TableT1CornerDRow
(PGEN ) (to Q delay) () (t) (pgenq_clamph) (4.224) (4.970) TableT1CornerDRow
TableT1CornerEnd
/pagey exch def
% after table spaceLeft=308
% headerEstimate=77
% estimate=154
% tailEstimate=0
% spaceLeft=308
/pagey pagey 5 sub def
(Pin Capacitance) (units = fF) pagey SectionStart
/pagey exch def

/TextFont /Helvetica-Bold findfont text_size scalefont def
/pagey pagey 15 sub def
140 85 line_left 10 add pagey 14 Table1CornerStart
/TextFont /Helvetica findfont text_size scalefont def
Table1CornerHeader
(        CLK) () (14.0250)     Table1CornerRow
(        CEN) () (4.6667)     Table1CornerRow
(        A) () (2.4009)     Table1CornerRow
(        EMA) () (15.2050)     Table1CornerRow
(        TEN) () (12.4181)     Table1CornerRow
(        BEN) () (12.9076)     Table1CornerRow
(        TCEN) () (4.9754)     Table1CornerRow
(        TA) () (2.3519)     Table1CornerRow
(        TQ) () (5.1750)     Table1CornerRow
(        PGEN) () (7.2817)     Table1CornerRow
(        KEN) () (5.5534)     Table1CornerRow
Table1CornerEnd
/pagey exch def
% headerEstimate=77
% estimate=294
% tailEstimate=94
% spaceLeft=77
() (8) centerx footery ShortCopyright
grestore 
pagelevel restore
showpage
%%Page: 9 9
%%BeginPageSetup
/pagelevel save def
%%EndPageSetup
gsave
/leftmargin 165 def
/rightmargin 540 def
/pagey 740 def
/title_size 14 def
/centerx 300 def
/footery 56 def
/text_size 10 def
/Helvetica-Bold findfont text_size scalefont setfont
(Current) (units = mA) pagey SectionStart
/pagey exch def

/pagey pagey 15 sub def
220 80 line_left 4 add pagey 14 Table1CornerStart
/TextFont /Helvetica-Bold findfont text_size scalefont def
Table1CornerHeader
/TextFont /Helvetica findfont text_size scalefont def
/TextSuperscriptFont /Helvetica findfont 8 scalefont def
( Read AC Curr.  \(EMA=0 KEN=0\)) (1,4) (0.629872) Table1CornerRow
( Read AC Curr.  \(EMA=0 KEN=1\)) (1,4) (0.623355) Table1CornerRow
( Read AC Curr.  \(EMA=1 KEN=0\)) (1,4) (0.629872) Table1CornerRow
( Read AC Curr.  \(EMA=1 KEN=1\)) (1,4) (0.623355) Table1CornerRow
( Read AC Curr.  \(EMA=2 KEN=0\)) (1,4) (0.631074) Table1CornerRow
( Read AC Curr.  \(EMA=2 KEN=1\)) (1,4) (0.624558) Table1CornerRow
( Read AC Curr.  \(EMA=3 KEN=0\)) (1,4) (0.631086) Table1CornerRow
( Read AC Curr.  \(EMA=3 KEN=1\)) (1,4) (0.624569) Table1CornerRow
( Read AC Curr.  \(EMA=4 KEN=0\)) (1,4) (0.631315) Table1CornerRow
( Read AC Curr.  \(EMA=4 KEN=1\)) (1,4) (0.624729) Table1CornerRow
( Read AC Curr.  \(EMA=5 KEN=0\)) (1,4) (0.632124) Table1CornerRow
( Read AC Curr.  \(EMA=5 KEN=1\)) (1,4) (0.625538) Table1CornerRow
( Read AC Curr.  \(EMA=6 KEN=0\)) (1,4) (0.633236) Table1CornerRow
( Read AC Curr.  \(EMA=6 KEN=1\)) (1,4) (0.626373) Table1CornerRow
( Read AC Curr.  \(EMA=7 KEN=0\)) (1,4) (0.633292) Table1CornerRow
( Read AC Curr.  \(EMA=7 KEN=1\)) (1,4) (0.62643) Table1CornerRow
(  Peak Curr.) () (11.681484) Table1CornerRow
(  Inrush Curr.) () (4.9886) Table1CornerRow
(  Deselect Curr.) (2,4) (0.075568) Table1CornerRow
(  Standby Default Curr.) (3) (1.930e-04) Table1CornerRow
(  Standby Power Down Curr.) (3) (3.271e-05) Table1CornerRow
Table1CornerEnd
/pagey exch def

/pagey pagey 4 sub def
line_left 4 add rightmargin pagey 10 TextStart
/TextFont /Helvetica findfont 8 scalefont def
/TextSuperscriptFont /Helvetica findfont 8 scalefont def
(M) TextIndent
TextParaStart
(1) TextSuperscript
/TextFont /Helvetica-Oblique findfont 8 scalefont def
(The AC current value assumes that 50% of output pins and 50% of address \
 pins will switch at the user defined frequency of 100Mhz\
 and user defined clock activity_factor of 50 %.) TextPiece
( It is assumed that ) TextPiece
()
(BIST)
(EMA)
()
TextFourList
( pins do not switch.) TextPiece
TextParaEnd
TextParaStart
(2) TextSuperscript
/TextFont /Helvetica-Oblique findfont 8 scalefont def
(The deselected current assumes the memory is deselected,\
 50% addresses switch, and 50% of input pins switch\
 at the user defined frequency of 100MHz.\
 The logic switching component of deselected power becomes\
 negligbly small if the input pins are held stable by\
 externally controlling these signals with chip select.) TextPiece
( It is assumed that ) TextPiece
()
(BIST)
(EMA)
()
TextFourList
( pins do not switch.) TextPiece
TextParaEnd
TextParaStart
(3) TextSuperscript
/TextFont /Helvetica-Oblique findfont 8 scalefont def
(The standby current value is independent of frequency\
 and assumes all inputs and outputs are stable.) TextPiece
TextParaEnd
TextParaStart
(4) TextSuperscript
/TextFont /Helvetica-Oblique findfont 8 scalefont def
(The leakage current component is not included in this value.) TextPiece
TextParaEnd
TextParaStart
(5) TextSuperscript
/TextFont /Helvetica-Oblique findfont 8 scalefont def
(Clock activity factor will affect total current.) TextPiece
TextParaEnd
TextEnd
/pagey exch def
% after table spaceLeft=205
() (9) centerx footery ShortCopyright
grestore 
pagelevel restore
showpage
%%Page: 10 10
%%BeginPageSetup
/pagelevel save def
%%EndPageSetup
gsave
/leftmargin 165 def
/rightmargin 540 def
/pagey 740 def
/title_size 14 def
/centerx 300 def
/footery 56 def
/text_size 10 def
(Clock Noise Limit) () pagey SectionStart
/pagey exch def

/pagey pagey 15 sub def
60 45 45 leftmargin 55 sub pagey 14 TableD1CornerStart
/TextFont /Helvetica-Bold findfont text_size scalefont def
TableD1CornerHeader
/TextFont /Helvetica findfont text_size scalefont def
(CLK) ( 0.223ns ) ( 1.080V ) TableD1CornerRow
TableD1CornerEnd
/pagey exch def

leftmargin 40 sub rightmargin pagey 10 TextStart
/TextFont /Helvetica-Oblique findfont 8 scalefont def
(The clock noise limit is the maximum voltage allowed \(for the\
 indicated pulse width\) that does not cause an unintentional\
 memory cycle or other memory failure.) TextLine
TextEnd
/pagey exch def
(Supply Noise Limit) (units = V) pagey SectionStart
/pagey exch def

/pagey pagey 15 sub def
60 90 leftmargin 55 sub pagey 14 Table1CornerStart
/TextFont /Helvetica-Bold findfont text_size scalefont def
Table1CornerHeader
/TextFont /Helvetica findfont text_size scalefont def
(Power) () (1.080) Table1CornerRow
(Ground) () (1.080) Table1CornerRow
Table1CornerEnd
/pagey exch def

leftmargin 40 sub rightmargin pagey 10 TextStart
/TextFont /Helvetica-Oblique findfont 8 scalefont def
(The power and ground noise limit is the maximum supply\
 voltage transition that is allowed without causing\
 a memory failure.) TextLine
TextEnd
/pagey exch def
centerx 300 EndingCopyright
() (10) centerx footery ShortCopyright
grestore 
pagelevel restore
showpage
%%Trailer
%%Pages: 10
%%EOF
